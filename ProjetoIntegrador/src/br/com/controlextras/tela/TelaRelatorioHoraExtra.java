package br.com.controlextras.tela;

import br.com.controlextras.data.CargoDAO;
import br.com.controlextras.data.FuncHoraExtraDAO;
import br.com.controlextras.data.FuncionarioDAO;
import br.com.controlextras.data.HoraExtraDAO;
import br.com.controlextras.modelo.Cargo;
import br.com.controlextras.modelo.FuncHoraExtra;
import br.com.controlextras.modelo.Funcionario;
import br.com.controlextras.modelo.HoraExtra;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class TelaRelatorioHoraExtra extends javax.swing.JDialog {
    DefaultTableModel dtmHorasExtras;

    public TelaRelatorioHoraExtra(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        carregaTotalHE();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlContainer = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        pnlHoraExtras = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lblMes = new javax.swing.JLabel();
        cmbMes = new javax.swing.JComboBox<>();
        lblAno = new javax.swing.JLabel();
        btnFiltrar = new javax.swing.JButton();
        cmbAno = new javax.swing.JComboBox<>();
        btnDetalharHE = new javax.swing.JButton();
        scrHorasExtras = new javax.swing.JScrollPane();
        String colunas[] = {"ID", "Nome", "Cargo","Salario", "Total de Hora Extra"};
        dtmHorasExtras = new DefaultTableModel(colunas, 0){
            // Sobrescreva isCellEditable para impedir a edição de linhas específicas
            @Override
            public boolean isCellEditable(int row, int column) {
                // Impede a edição das linhas 0 e 1
                return false;
            }
        };
        // carregaTotalHE();
        tblHorasExtras = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Horas Extras Realizadas");
        setResizable(false);

        pnlContainer.setBackground(new java.awt.Color(23, 24, 31));

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(11, 135, 112));
        lblTitulo.setText("RELATÓRIO HORA EXTRA");

        pnlHoraExtras.setBackground(new java.awt.Color(49, 77, 74));

        lblMes.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblMes.setForeground(new java.awt.Color(23, 24, 31));
        lblMes.setText("Mês:");

        cmbMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro" }));

        lblAno.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAno.setForeground(new java.awt.Color(23, 24, 31));
        lblAno.setText("Ano:");

        btnFiltrar.setMnemonic(KeyEvent.VK_F);
        btnFiltrar.setText("Filtrar");
        btnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarActionPerformed(evt);
            }
        });

        cmbAno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "2024", "2025" }));

        btnDetalharHE.setText("Detalhar Hora Extras do Funcionário");
        btnDetalharHE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetalharHEActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAno)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFiltrar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDetalharHE)
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMes)
                    .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAno)
                    .addComponent(cmbAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFiltrar)
                    .addComponent(btnDetalharHE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblHorasExtras.setModel(dtmHorasExtras);
        scrHorasExtras.setViewportView(tblHorasExtras);

        javax.swing.GroupLayout pnlHoraExtrasLayout = new javax.swing.GroupLayout(pnlHoraExtras);
        pnlHoraExtras.setLayout(pnlHoraExtrasLayout);
        pnlHoraExtrasLayout.setHorizontalGroup(
            pnlHoraExtrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHoraExtrasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHoraExtrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrHorasExtras))
                .addContainerGap())
        );
        pnlHoraExtrasLayout.setVerticalGroup(
            pnlHoraExtrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHoraExtrasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scrHorasExtras, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(158, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlContainerLayout = new javax.swing.GroupLayout(pnlContainer);
        pnlContainer.setLayout(pnlContainerLayout);
        pnlContainerLayout.setHorizontalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlContainerLayout.createSequentialGroup()
                        .addGap(217, 217, 217)
                        .addComponent(lblTitulo)
                        .addGap(0, 238, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContainerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlHoraExtras, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlContainerLayout.setVerticalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblTitulo)
                .addGap(18, 18, 18)
                .addComponent(pnlHoraExtras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarActionPerformed
        int mesFiltrar = cmbMes.getSelectedIndex();
        int anoFiltrar = cmbAno.getSelectedIndex();
        
        if((mesFiltrar == 0) && (anoFiltrar == 0)){
            carregaTotalHE();
        }
        if((mesFiltrar != 0) && (anoFiltrar == 0)){
            carregaTotalHE(mesFiltrar);
        }
        if((mesFiltrar == 0) &&  (anoFiltrar != 0)){
            carregaTotalHE(mesFiltrar, Integer.parseInt(cmbAno.getSelectedItem().toString()));
        }
        if((mesFiltrar != 0) &&  (anoFiltrar != 0)){
            carregaTotalHE(mesFiltrar, Integer.parseInt(cmbAno.getSelectedItem().toString()));
        }
    }//GEN-LAST:event_btnFiltrarActionPerformed

    private void btnDetalharHEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetalharHEActionPerformed
        // TODO add your handling code here
        int selecao = tblHorasExtras.getSelectedRow();
        if(selecao == -1) {
            JOptionPane.showMessageDialog(null, "Selecione uma Hora Extra.", 
                        "HE não selecionada", JOptionPane.WARNING_MESSAGE);
        } else {
            int idFunc = (int) dtmHorasExtras.getValueAt(selecao, 0);
            TelaHoraExtrasInscrito telaHoraExtrasInscrito = new TelaHoraExtrasInscrito(null, true, idFunc);
            telaHoraExtrasInscrito.setVisible(true);
        }
        tblHorasExtras.clearSelection();
        
    }//GEN-LAST:event_btnDetalharHEActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaRelatorioHoraExtra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            TelaRelatorioHoraExtra dialog = new TelaRelatorioHoraExtra(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetalharHE;
    private javax.swing.JButton btnFiltrar;
    private javax.swing.JComboBox<String> cmbAno;
    private javax.swing.JComboBox<String> cmbMes;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAno;
    private javax.swing.JLabel lblMes;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlContainer;
    private javax.swing.JPanel pnlHoraExtras;
    private javax.swing.JScrollPane scrHorasExtras;
    private javax.swing.JTable tblHorasExtras;
    // End of variables declaration//GEN-END:variables

    private void carregaTotalHE() {  
        List<FuncHoraExtra> listaFuncHe = new FuncHoraExtraDAO().getFuncHoraExtra();
        Map<Integer, HoraExtra> listaHe = new HoraExtraDAO().getHoraExtra();
        Map<String, Funcionario> funcionarios = new FuncionarioDAO().getFuncionario();
        
        Map<Funcionario, Duration> mapaHorasExtras = funcionarios.values().stream()
            .collect(Collectors.toMap(
                funcionario -> funcionario,
                funcionario -> listaFuncHe.stream()
                .filter(relacao -> relacao.getFuncId() == funcionario.getId())
                .map(relacao -> relacao.getHeId())
                .flatMap(horaExtraId -> listaHe.values().stream()
                    .filter(h -> {
                        return h.getId() == horaExtraId && h.isAprovada();
                    })
                    .map(HoraExtra::getDuracao)
                )
                .reduce(Duration.ZERO, Duration::plus)
        ));
       
        tabelaFiltrada(mapaHorasExtras);
    }
  
    private void carregaTotalHE(int mes) {
        List<FuncHoraExtra> listaFuncHe = new FuncHoraExtraDAO().getFuncHoraExtra();
        Map<Integer, HoraExtra> listaHe = new HoraExtraDAO().getHoraExtra();
        Map<String, Funcionario> funcionarios = new FuncionarioDAO().getFuncionario();
        
        Map<Funcionario, Duration> mapaHorasExtras = funcionarios.values().stream()
            .collect(Collectors.toMap(
                funcionario -> funcionario,
                funcionario -> listaFuncHe.stream()
                .filter(relacao -> relacao.getFuncId() == funcionario.getId())
                .map(relacao -> relacao.getHeId())
                .flatMap(horaExtraId -> listaHe.values().stream()
                    .filter(h -> {
                        return h.getId() == horaExtraId && h.isAprovada() && h.getData().getMonthValue() == mes;
                    })
                    .map(HoraExtra::getDuracao)
                )
                .reduce(Duration.ZERO, Duration::plus)
        ));
       
        tabelaFiltrada(mapaHorasExtras);
    }
        
    private void carregaTotalHE(int mes, int ano) {
        if(mes == 0) {
            List<FuncHoraExtra> listaFuncHe = new FuncHoraExtraDAO().getFuncHoraExtra();
            Map<Integer, HoraExtra> listaHe = new HoraExtraDAO().getHoraExtra();
            Map<String, Funcionario> funcionarios = new FuncionarioDAO().getFuncionario();
            
            Map<Funcionario, Duration> mapaHorasExtras = funcionarios.values().stream()
                .collect(Collectors.toMap(
                    funcionario -> funcionario,
                    funcionario -> listaFuncHe.stream()
                    .filter(relacao -> relacao.getFuncId() == funcionario.getId())
                    .map(relacao -> relacao.getHeId())
                    .flatMap(horaExtraId -> listaHe.values().stream()
                        .filter(h -> {
                            return h.getId() == horaExtraId && h.isAprovada() && h.getData().getYear()== ano;
                        })
                        .map(HoraExtra::getDuracao)
                    )
                    .reduce(Duration.ZERO, Duration::plus)
            ));

            tabelaFiltrada(mapaHorasExtras);
        } else {
            List<FuncHoraExtra> listaFuncHe = new FuncHoraExtraDAO().getFuncHoraExtra();
            Map<Integer, HoraExtra> listaHe = new HoraExtraDAO().getHoraExtra();
            Map<String, Funcionario> funcionarios = new FuncionarioDAO().getFuncionario();

            Map<Funcionario, Duration> mapaHorasExtras = funcionarios.values().stream()
                .collect(Collectors.toMap(
                    funcionario -> funcionario,
                    funcionario -> listaFuncHe.stream()
                    .filter(relacao -> relacao.getFuncId() == funcionario.getId())
                    .map(relacao -> relacao.getHeId())
                    .flatMap(horaExtraId -> listaHe.values().stream()
                        .filter(h -> {
                            return h.getId() == horaExtraId && h.isAprovada() && h.getData().getYear()== ano && h.getData().getMonthValue() == mes;
                        })
                        .map(HoraExtra::getDuracao)
                    )
                    .reduce(Duration.ZERO, Duration::plus)
            ));

            tabelaFiltrada(mapaHorasExtras);
        }
    }
    
    private Object[] linhaDaTabela(Funcionario func, Duration duracao) {
        CargoDAO cargoDao = new CargoDAO();
        Cargo cargo = cargoDao.getCargo(func.getCargo().getId());

        DecimalFormat df = new DecimalFormat("#.00");
        String numeroFormatado = "R$ " + df.format(func.getSalario());

        Object[] linha = {
            func.getId(),
            func.getNome(),
            cargo.getTipo(),
            numeroFormatado,
            duracao.toHours() + "h " + duracao.toMinutesPart() + "m"
        };
         return linha;
    }
    
    private void tabelaFiltrada(Map<Funcionario, Duration> mapa) {
        dtmHorasExtras.setRowCount(0);
        mapa.entrySet().stream()
            .sorted((e1, e2) -> e2.getValue().compareTo(e1.getValue()))
            .limit(10)
            .forEach(dado -> {
                Funcionario func = dado.getKey();
                Duration duracao = dado.getValue();
                
                Object[] linha = linhaDaTabela(func, duracao);
                
            dtmHorasExtras.addRow(linha);
            });
    }
}
