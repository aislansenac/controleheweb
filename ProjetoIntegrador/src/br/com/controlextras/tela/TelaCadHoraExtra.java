package br.com.controlextras.tela;

import br.com.controlextras.data.FuncionarioDAO;
import br.com.controlextras.data.HoraExtraDAO;
import br.com.controlextras.modelo.Coordenador;
import br.com.controlextras.modelo.Funcionario;
import br.com.controlextras.modelo.Gerente;
import br.com.controlextras.modelo.HoraExtra;
import java.awt.event.KeyEvent;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class TelaCadHoraExtra extends javax.swing.JDialog {

    DateTimeFormatter dataFormatada = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    DefaultTableModel dtmHorasExtras;
    
    public TelaCadHoraExtra(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlContainer = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        pnlDadosHoraExtra = new javax.swing.JPanel();
        lblData = new javax.swing.JLabel();
        lblHoraComeco = new javax.swing.JLabel();
        lblHoraTermino = new javax.swing.JLabel();
        lblObservacao = new javax.swing.JLabel();
        txtData = new javax.swing.JFormattedTextField();
        txtHotaComeco = new javax.swing.JFormattedTextField();
        txtHoraTermino = new javax.swing.JFormattedTextField();
        scrObservacao = new javax.swing.JScrollPane();
        txtObservacao = new javax.swing.JTextArea();
        btnCadastrar = new javax.swing.JButton();
        lblQuantidades = new javax.swing.JLabel();
        cmbQuantidades = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        lblPesquisaData = new javax.swing.JLabel();
        txtPesquisaData = new javax.swing.JTextField();
        scrHorasExtras = new javax.swing.JScrollPane();
        String colunas[] = {"ID", "Data", "Começo", "Término", "Observação", "Criador"};
        dtmHorasExtras = new DefaultTableModel(colunas, 0){
            // Sobrescreva isCellEditable para impedir a edição de linhas específicas
            @Override
            public boolean isCellEditable(int row, int column) {
                // Impede a edição das linhas 0 e 1
                return false;
            }
        };
        atualizaLista();
        tblHorasExtras = new javax.swing.JTable();
        btnExcluir = new javax.swing.JButton();
        btnVerDetalhes = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro e Exclusão de Hora Extra");
        setResizable(false);

        pnlContainer.setBackground(new java.awt.Color(23, 24, 31));

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(11, 135, 112));
        lblTitulo.setText("DADOS DA HORA EXTRA");

        pnlDadosHoraExtra.setBackground(new java.awt.Color(49, 77, 74));

        lblData.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblData.setForeground(new java.awt.Color(23, 24, 31));
        lblData.setLabelFor(txtData);
        lblData.setText("Data:");

        lblHoraComeco.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblHoraComeco.setForeground(new java.awt.Color(23, 24, 31));
        lblHoraComeco.setLabelFor(txtHotaComeco);
        lblHoraComeco.setText("Hora do começo:");

        lblHoraTermino.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblHoraTermino.setForeground(new java.awt.Color(23, 24, 31));
        lblHoraTermino.setLabelFor(txtHoraTermino);
        lblHoraTermino.setText("Hora do término:");

        lblObservacao.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblObservacao.setForeground(new java.awt.Color(23, 24, 31));
        lblObservacao.setLabelFor(txtObservacao);
        lblObservacao.setText("Observação:");

        txtData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        txtData.setNextFocusableComponent(txtHotaComeco);

        txtHotaComeco.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        txtHotaComeco.setNextFocusableComponent(txtHoraTermino);

        txtHoraTermino.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        txtHoraTermino.setNextFocusableComponent(cmbQuantidades);

        txtObservacao.setColumns(20);
        txtObservacao.setLineWrap(true);
        txtObservacao.setRows(5);
        txtObservacao.setWrapStyleWord(true);
        txtObservacao.setNextFocusableComponent(btnCadastrar);
        scrObservacao.setViewportView(txtObservacao);

        btnCadastrar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCadastrar.setMnemonic(KeyEvent.VK_H);
        btnCadastrar.setText("Cadastrar Hora Extra");
        btnCadastrar.setNextFocusableComponent(txtPesquisaData);
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        lblQuantidades.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblQuantidades.setForeground(new java.awt.Color(23, 24, 31));
        lblQuantidades.setLabelFor(txtHoraTermino);
        lblQuantidades.setText("Quantidades:");

        cmbQuantidades.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));
        cmbQuantidades.setNextFocusableComponent(txtObservacao);

        javax.swing.GroupLayout pnlDadosHoraExtraLayout = new javax.swing.GroupLayout(pnlDadosHoraExtra);
        pnlDadosHoraExtra.setLayout(pnlDadosHoraExtraLayout);
        pnlDadosHoraExtraLayout.setHorizontalGroup(
            pnlDadosHoraExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDadosHoraExtraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDadosHoraExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblData, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHoraComeco)
                    .addComponent(lblHoraTermino)
                    .addComponent(lblQuantidades))
                .addGap(25, 25, 25)
                .addGroup(pnlDadosHoraExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDadosHoraExtraLayout.createSequentialGroup()
                        .addGroup(pnlDadosHoraExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtHoraTermino, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHotaComeco, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlDadosHoraExtraLayout.createSequentialGroup()
                                .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(lblObservacao)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scrObservacao, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE))
                    .addGroup(pnlDadosHoraExtraLayout.createSequentialGroup()
                        .addComponent(cmbQuantidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCadastrar)))
                .addContainerGap())
        );
        pnlDadosHoraExtraLayout.setVerticalGroup(
            pnlDadosHoraExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDadosHoraExtraLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(pnlDadosHoraExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDadosHoraExtraLayout.createSequentialGroup()
                        .addGroup(pnlDadosHoraExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblData)
                            .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblObservacao))
                        .addGap(19, 19, 19)
                        .addGroup(pnlDadosHoraExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHoraComeco)
                            .addComponent(txtHotaComeco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(pnlDadosHoraExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHoraTermino)
                            .addComponent(txtHoraTermino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(pnlDadosHoraExtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblQuantidades)
                            .addComponent(cmbQuantidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlDadosHoraExtraLayout.createSequentialGroup()
                        .addComponent(scrObservacao, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnCadastrar)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(49, 77, 74));

        lblPesquisaData.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPesquisaData.setForeground(new java.awt.Color(23, 24, 31));
        lblPesquisaData.setText("Pesquisar por data:");

        txtPesquisaData.setNextFocusableComponent(btnExcluir);
        txtPesquisaData.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtPesquisaDataCaretUpdate(evt);
            }
        });
        txtPesquisaData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPesquisaDataKeyPressed(evt);
            }
        });

        tblHorasExtras.setModel(dtmHorasExtras);
        scrHorasExtras.setViewportView(tblHorasExtras);

        btnExcluir.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnExcluir.setForeground(new java.awt.Color(204, 51, 0));
        btnExcluir.setMnemonic(KeyEvent.VK_X);
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnVerDetalhes.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnVerDetalhes.setForeground(new java.awt.Color(51, 51, 255));
        btnVerDetalhes.setText("Ver Detalhes da HE");
        btnVerDetalhes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerDetalhesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblPesquisaData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPesquisaData, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnExcluir)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scrHorasExtras, javax.swing.GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnVerDetalhes)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPesquisaData)
                    .addComponent(txtPesquisaData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcluir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrHorasExtras, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnVerDetalhes)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlContainerLayout = new javax.swing.GroupLayout(pnlContainer);
        pnlContainer.setLayout(pnlContainerLayout);
        pnlContainerLayout.setHorizontalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlContainerLayout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(lblTitulo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlContainerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlDadosHoraExtra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlContainerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlContainerLayout.setVerticalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDadosHoraExtra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        // TODO add your handling code here:  
        Coordenador coordenador = null;
        if (TelaInicial.funcionario.getCargo().getId() == 3) {
            Gerente gerente = new Gerente(TelaInicial.funcionario);
            coordenador = (Gerente) gerente;
        } else if (TelaInicial.funcionario.getCargo().getId() == 2) {
            Coordenador coord = new Coordenador(TelaInicial.funcionario);
            coordenador = (Coordenador) coord;
        }

        if(!emptyFields()){
           //Verifica se a data é válida    
            String data = txtData.getText();
            LocalDate dataLocal = LocalDate.parse(data, dataFormatada);

            String horaComeco = txtHotaComeco.getText();
            LocalTime horaInicio = LocalTime.parse(horaComeco);
            
            String horaTermino = txtHoraTermino.getText();
            LocalTime horaFim = LocalTime.parse(horaTermino);
            
            if(verificaDataHora(dataLocal)) {
               if(verificaDataHora(horaInicio, horaFim)) {
                   if(verificaDataHora(dataLocal, horaInicio)) {
                       String observacao = txtObservacao.getText();
                       
                       cadastradHoraExtra(coordenador, dataLocal, horaInicio, horaFim, observacao);
                       
                       atualizaLista();
                       cleanFields();
                       JOptionPane.showMessageDialog(null, "Dados cadastrados com sucesso.", 
                            "Hora Extra cadastrada", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        DateTimeFormatter formataHora = DateTimeFormatter.ofPattern("HH:mm");
                        JOptionPane.showMessageDialog(null, "Hora Extra tem que ser superior 1h da hora atual.\nHora atual: " 
                                + LocalTime.now().format(formataHora), 
                        "Hora inválida", JOptionPane.WARNING_MESSAGE);
                }
               } else {
               JOptionPane.showMessageDialog(null, "Não pode criar hora extra menor que 1h.", 
                "Hora inválida", JOptionPane.WARNING_MESSAGE);
           }
           } else {
               JOptionPane.showMessageDialog(null, "Não pode criar hora extra antes do dia atual.\n Data Atual: " 
                       + LocalDate.now().format(dataFormatada), 
                "Data inválida", JOptionPane.WARNING_MESSAGE);
           }
        }   
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        // TODO add your handling code here:
        int resp = tblHorasExtras.getSelectedRow();
        if(resp == -1 ){
            JOptionPane.showMessageDialog(null, "Selecione uma Hora Extra.", 
                        "HE não selecionada", JOptionPane.WARNING_MESSAGE);
        } else {
            deleteHoraExtra(resp);
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void txtPesquisaDataKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisaDataKeyPressed
       
    }//GEN-LAST:event_txtPesquisaDataKeyPressed

    private void txtPesquisaDataCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtPesquisaDataCaretUpdate
        // TODO add your handling code here:
        String data = txtPesquisaData.getText();
        if(data.length()==0){
            atualizaLista();
        }else {
            buscarData(data);
        }
    }//GEN-LAST:event_txtPesquisaDataCaretUpdate

    private void btnVerDetalhesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerDetalhesActionPerformed
        // TODO add your handling code here:
        int resp = tblHorasExtras.getSelectedRow();
        if(resp == -1 ){
            JOptionPane.showMessageDialog(null, "Selecione uma Hora Extra.", 
                        "HE não selecionada", JOptionPane.WARNING_MESSAGE);
        } else {
            detalharHoraExtra(resp);
        }
    }//GEN-LAST:event_btnVerDetalhesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCadHoraExtra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            TelaCadHoraExtra dialog = new TelaCadHoraExtra(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnVerDetalhes;
    private javax.swing.JComboBox<String> cmbQuantidades;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblHoraComeco;
    private javax.swing.JLabel lblHoraTermino;
    private javax.swing.JLabel lblObservacao;
    private javax.swing.JLabel lblPesquisaData;
    private javax.swing.JLabel lblQuantidades;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlContainer;
    private javax.swing.JPanel pnlDadosHoraExtra;
    private javax.swing.JScrollPane scrHorasExtras;
    private javax.swing.JScrollPane scrObservacao;
    private javax.swing.JTable tblHorasExtras;
    private javax.swing.JFormattedTextField txtData;
    private javax.swing.JFormattedTextField txtHoraTermino;
    private javax.swing.JFormattedTextField txtHotaComeco;
    private javax.swing.JTextArea txtObservacao;
    private javax.swing.JTextField txtPesquisaData;
    // End of variables declaration//GEN-END:variables
  
    private boolean emptyFields() {
        boolean resp = false;
        
        if(txtData.getText().replace("/", "").trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Campo Data não pode está vázio.\nModelo: dd/mm/aaaa.", 
                    "Formato inválido", JOptionPane.WARNING_MESSAGE);
            resp = true;
            txtData.setText("");
            txtData.setValue(null);
            txtData.requestFocus();
        } else if(!isValidDate(txtData.getText())){
            JOptionPane.showMessageDialog(null, "Campo Data formato inválido.\nModelo: dd/mm/aaaa.", 
                    "Formato inválido", JOptionPane.WARNING_MESSAGE);
            txtData.setText("");
            txtData.setValue(null);
            txtData.requestFocus();
            resp = true;
        } else if(txtHotaComeco.getText().replace(":", "").trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Campo Hora do começo não pode está vázio.\nModelo: hh:mm.", 
                    "Formato inválido", JOptionPane.WARNING_MESSAGE);
            txtHotaComeco.setText("");
            txtHotaComeco.setValue(null);
            txtHotaComeco.requestFocus();
            resp = true;
        } else if(txtHoraTermino.getText().replace(":", "").trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Campo Hora do fim formato inválido.\nModelo: hh:mm.", 
                    "Formato inválido", JOptionPane.WARNING_MESSAGE);
            txtHoraTermino.setText("");
            txtHoraTermino.setValue(null);
            txtHoraTermino.requestFocus();
            resp = true;
        } else if(txtObservacao.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Campo Observação não pode ser nulo.", 
                    "Campo vazio", JOptionPane.WARNING_MESSAGE);
            txtObservacao.setText("");
            txtObservacao.requestFocus();
            resp = true;
        }
        return resp;
    }
    
    private void atualizaLista() {
        dtmHorasExtras.setRowCount(0);
        
        HoraExtraDAO horaExtraDao = new HoraExtraDAO();
        Map<Integer, HoraExtra> listaHoraExtra = horaExtraDao.getHoraExtra();
        List<HoraExtra> listaNaoInscritos = listaHoraExtra.values().stream()
                                            .filter(h -> !h.isInscrito())
                                            .sorted(Comparator.comparingInt(HoraExtra::getId).reversed()) // Ordena pelo ID
                                            .collect(Collectors.toList()
        );

        for (HoraExtra he : listaNaoInscritos) {
            FuncionarioDAO funcionarioDao = new FuncionarioDAO();
            Funcionario funcionario = funcionarioDao.getFuncionario(he.getCriador().getId());
            
            String nome = nomeSobrenome(funcionario.getNome());
            Object[] linha = {he.getId(), he.getData().format(dataFormatada),
                              he.getHoraInicio(), he.getHoraFim(),
                              he.getObservacao(), nome 
            };
    
            dtmHorasExtras.addRow(linha);
        } 
    }
    
    private boolean isValidDate(String dateStr) {
        try {
            LocalDate.parse(dateStr, dataFormatada);
            return true;
        } catch(DateTimeParseException e){
            return false;
        } 
    }
   
    private void cadastradHoraExtra(Coordenador coordenador, LocalDate data, LocalTime inicio, LocalTime fim, String observacao) {
        for(int i=0;i<cmbQuantidades.getSelectedIndex()+1;i++){
            HoraExtra horaExtra = new HoraExtra(data, inicio, fim, coordenador, observacao);
            HoraExtraDAO horaExtraDao = new HoraExtraDAO();
            horaExtraDao.inserir(horaExtra);
        }
    }

    private void cleanFields() {
        txtData.setText("");
        txtData.setValue(null);
        
        txtHotaComeco.setText("");
        txtHotaComeco.setValue(null);
        
        txtHoraTermino.setText("");
        txtHoraTermino.setValue(null);
        
        txtObservacao.setText("");
        
        txtPesquisaData.setText("");
        
        cmbQuantidades.setSelectedIndex(0);
        txtData.requestFocus();
    }
    
    private void buscarData(String data) {
        // Limpa a tabela antes de mostrar os resultados
        dtmHorasExtras.setRowCount(0);
        
        HoraExtraDAO heDao = new HoraExtraDAO();
        Map<Integer, HoraExtra> listaHe = heDao.getHoraExtra();
        // Verifica se o usuário existe no mapa
        for (Map.Entry<Integer, HoraExtra> entrada : listaHe.entrySet()) {
            if(entrada.getValue().getData().format(dataFormatada).startsWith(data)){

                FuncionarioDAO funcionarioDao = new FuncionarioDAO();
                Funcionario funcionario = funcionarioDao.getFuncionario(entrada.getValue().getCriador().getId());
            
                String nome = nomeSobrenome(funcionario.getNome());
                String[] linha = {String.valueOf(entrada.getValue().getId()), entrada.getValue().getData().format(dataFormatada), 
                                entrada.getValue().getHoraInicio().toString(), entrada.getValue().getHoraFim().toString(),
                                entrada.getValue().getObservacao(), nome};
                dtmHorasExtras.addRow(linha);
            }

        }
    }
    
    private void deleteHoraExtra(int selecao) {
        int id = (int) dtmHorasExtras.getValueAt(selecao, 0);
            
        Object[] opcoes = {"<html><body><b><span style='color:red;'>SIM</span></b></body></html>", 
                            "<html><body><b><span style='color:blue;'>NÃO</span></b></body></html>"};
        
        HoraExtraDAO horaExtraDao = new HoraExtraDAO();
        HoraExtra he = horaExtraDao.getHoraExtra(id);
        
        FuncionarioDAO funcionarioDao = new FuncionarioDAO();
        Funcionario funcionario = funcionarioDao.getFuncionario(he.getCriador().getId());
        
        String mensagem = "<html><body>" +
                "<span>Deseja <b><span style='color:red;'>apagar</span></b> a hora extra</b> abaixo? </span><br>" +
                "<b><span>ID: </span></b>" + he.getId() + "<br>" +
                "<b><span>Data: </span></b>" + he.getData().format(dataFormatada) + "<br>" +
                "<b><span>Início: </span></b>" + he.getHoraInicio().toString() + "<br>" +
                "<b><span>Termino: </span></b>" + he.getHoraInicio().toString() + "<br>" +
                "<b><span>Criada por: </span></b>" + funcionario.getNome() + "<br>" +
                "<b>Observação:</b>"+ he.getObservacao() + "</span>" +
                "</body></html>";
        
        int resposta = JOptionPane.showOptionDialog(
            null, 
            mensagem, 
            "Deseja remover?", 
            JOptionPane.DEFAULT_OPTION, 
            JOptionPane.ERROR_MESSAGE, 
            null, 
            opcoes, 
            opcoes[1] // O botão "Não" como padrão
        );
        if(resposta == 0){
            horaExtraDao.deletar(id);
            atualizaLista();
        } else {
            tblHorasExtras.clearSelection();
        }
    }
    
    private void detalharHoraExtra(int selecao) {
        int id = (int) dtmHorasExtras.getValueAt(selecao, 0);

        HoraExtraDAO horaExtraDao = new HoraExtraDAO();
        HoraExtra he = horaExtraDao.getHoraExtra(id);
        
        FuncionarioDAO funcionarioDao = new FuncionarioDAO();
        Funcionario funcionario = funcionarioDao.getFuncionario(he.getCriador().getId());
        
        String mensagem = "<html><body>" +
                "<b><span>ID: </span></b>" + he.getId() + "<br>" +
                "<b><span>Data: </span></b>" + he.getData().format(dataFormatada) + "<br>" +
                "<b><span>Início: </span></b>" + he.getHoraInicio().toString() + "<br>" +
                "<b><span>Termino: </span></b>" + he.getHoraInicio().toString() + "<br>" +
                "<b><span>Criada por: </span></b>" + funcionario.getNome() + "<br>" +
                "<b>Observação:</b>"+ he.getObservacao() + "</span>" +
                "</body></html>";
        
        String mensagema = "ID: "  + id
                            + "\nData: "  + he.getData().format(dataFormatada)
                            + "\nInício: " + he.getHoraInicio().toString()
                            + "\nTermino: " + he.getHoraFim().toString()
                            + "\nObservação: " + he.getObservacao()
                            + "\nCriada por: " + funcionario.getNome();
        
        JOptionPane.showMessageDialog(
            null, 
            mensagem, 
            "Detalhes da Hora Extra", 
            JOptionPane.INFORMATION_MESSAGE
        );

        tblHorasExtras.clearSelection();
    }
    
    public boolean verificaDataHora(LocalTime horaInicio, LocalTime horaFim){
        Duration duracao = Duration.between(horaInicio, horaFim);        
        return duracao.toHours() > 0;      
    }
    
    public boolean verificaDataHora(LocalDate data){
        LocalDate dtAtual = LocalDate.now(); 
        return !data.isBefore(dtAtual);      
    }
    
    public boolean verificaDataHora(LocalDate data, LocalTime horaEntrada){
        LocalDateTime dtAtual = LocalDateTime.now();
        LocalTime maisUmaHora = horaEntrada.plusHours(1);
        Duration duration = Duration.between(dtAtual.toLocalTime(), maisUmaHora);
        
        return !(dtAtual.toLocalDate().equals(data) && duration.toHours() <= 1);
    }
   
    private String nomeSobrenome(String nomeCompleto) {
        String[] partes = nomeCompleto.split("\\s+");
        String primeiroNome = partes.length > 0 ? partes[0] : "";
        String ultimoNome = partes.length > 1 ? partes[partes.length - 1] : "";
        
        return primeiroNome + " " + ultimoNome;
    }
}
