package br.com.controlextras.tela;

import br.com.controlextras.data.CargoDAO;
import br.com.controlextras.data.FuncionarioDAO;
import br.com.controlextras.modelo.Cargo;
import br.com.controlextras.modelo.Coordenador;
import br.com.controlextras.modelo.Funcionario;
import br.com.controlextras.modelo.Gerente;

import java.awt.event.KeyEvent;
import java.text.DecimalFormat;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

import java.util.List;
import java.util.Map;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class TelaCadFuncionario extends javax.swing.JDialog {

    DefaultTableModel dtmFuncionario;
    DateTimeFormatter dataFormatada = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    
    public TelaCadFuncionario(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        preencherComboCargo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlContainer = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        pnlDadosFuncionario = new javax.swing.JPanel();
        lblNome = new javax.swing.JLabel();
        lblDataNascimento = new javax.swing.JLabel();
        lblCpf = new javax.swing.JLabel();
        lblSalario = new javax.swing.JLabel();
        lblTipoFuncionario = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtCpf = new javax.swing.JFormattedTextField();
        txtSalario = new javax.swing.JFormattedTextField();
        cmbTipoFuncionario = new javax.swing.JComboBox();
        txtDataNascimento = new javax.swing.JFormattedTextField();
        lblSenha = new javax.swing.JLabel();
        lblConfirmaSenha = new javax.swing.JLabel();
        txtConfirmeSenha = new javax.swing.JPasswordField();
        txtSenha = new javax.swing.JPasswordField();
        btnEnviar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();
        pnlFuncionarios = new javax.swing.JPanel();
        lblPesquisa = new javax.swing.JLabel();
        txtPesquisaNome = new javax.swing.JTextField();
        tblFuncionarios = new javax.swing.JScrollPane();
        String[] colunas = {"Nome", "CPF", "Salário", "Data de Nascimento", "Função ou Encargo", "Ativo"};
        dtmFuncionario = new DefaultTableModel(colunas, 0){
            // Sobrescreva isCellEditable para impedir a edição de linhas específicas
            @Override
            public boolean isCellEditable(int row, int column) {
                // Impede a edição das linhas 0 e 1
                return false;
            }
        };
        atualizaLista();
        tbFuncionarios = new javax.swing.JTable();
        btEditar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro e Edição de Funcionário");
        setResizable(false);

        pnlContainer.setBackground(new java.awt.Color(23, 24, 31));

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(11, 135, 112));
        lblTitulo.setText("DADOS DO FUNCIONÁRIO");

        pnlDadosFuncionario.setBackground(new java.awt.Color(49, 77, 74));

        lblNome.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblNome.setForeground(new java.awt.Color(23, 24, 31));
        lblNome.setLabelFor(txtNome);
        lblNome.setText("Nome:");

        lblDataNascimento.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblDataNascimento.setForeground(new java.awt.Color(23, 24, 31));
        lblDataNascimento.setLabelFor(txtDataNascimento);
        lblDataNascimento.setText("Data de nascimento:");

        lblCpf.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCpf.setForeground(new java.awt.Color(23, 24, 31));
        lblCpf.setLabelFor(txtCpf);
        lblCpf.setText("CPF:");

        lblSalario.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblSalario.setForeground(new java.awt.Color(23, 24, 31));
        lblSalario.setLabelFor(txtSalario);
        lblSalario.setText("Salário:");

        lblTipoFuncionario.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTipoFuncionario.setForeground(new java.awt.Color(23, 24, 31));
        lblTipoFuncionario.setLabelFor(cmbTipoFuncionario);
        lblTipoFuncionario.setText("Função ou encargo:");

        txtNome.setNextFocusableComponent(txtDataNascimento);

        try {
            txtCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtCpf.setNextFocusableComponent(cmbTipoFuncionario);

        txtSalario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtSalario.setNextFocusableComponent(cmbStatus);

        cmbTipoFuncionario.setToolTipText("Selecione");
        cmbTipoFuncionario.setNextFocusableComponent(txtSalario);

        txtDataNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        txtDataNascimento.setNextFocusableComponent(txtCpf);

        lblSenha.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblSenha.setForeground(new java.awt.Color(23, 24, 31));
        lblSenha.setLabelFor(txtSenha);
        lblSenha.setText("Senha:");

        lblConfirmaSenha.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblConfirmaSenha.setForeground(new java.awt.Color(23, 24, 31));
        lblConfirmaSenha.setLabelFor(txtConfirmeSenha);
        lblConfirmaSenha.setText("Confimar Senha:");

        txtConfirmeSenha.setNextFocusableComponent(btnLimpar);

        txtSenha.setNextFocusableComponent(txtConfirmeSenha);

        btnEnviar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnEnviar.setMnemonic(KeyEvent.VK_V);
        btnEnviar.setText("Enviar");
        btnEnviar.setNextFocusableComponent(txtPesquisaNome);
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        btnLimpar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnLimpar.setMnemonic(KeyEvent.VK_L);
        btnLimpar.setText("Limpar");
        btnLimpar.setNextFocusableComponent(btnEnviar);
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        lblStatus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(23, 24, 31));
        lblStatus.setLabelFor(cmbStatus);
        lblStatus.setText("Status:");

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ativo", "Inativo" }));
        cmbStatus.setToolTipText("Selecione");
        cmbStatus.setEnabled(false);
        cmbStatus.setNextFocusableComponent(txtSenha);

        javax.swing.GroupLayout pnlDadosFuncionarioLayout = new javax.swing.GroupLayout(pnlDadosFuncionario);
        pnlDadosFuncionario.setLayout(pnlDadosFuncionarioLayout);
        pnlDadosFuncionarioLayout.setHorizontalGroup(
            pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDadosFuncionarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDadosFuncionarioLayout.createSequentialGroup()
                        .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlDadosFuncionarioLayout.createSequentialGroup()
                                .addComponent(lblSalario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblStatus))
                            .addGroup(pnlDadosFuncionarioLayout.createSequentialGroup()
                                .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNome)
                                    .addComponent(lblCpf))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlDadosFuncionarioLayout.createSequentialGroup()
                                        .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                                        .addComponent(lblDataNascimento))
                                    .addGroup(pnlDadosFuncionarioLayout.createSequentialGroup()
                                        .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblTipoFuncionario)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTipoFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(75, 75, 75))
                    .addGroup(pnlDadosFuncionarioLayout.createSequentialGroup()
                        .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblSenha)
                            .addComponent(lblConfirmaSenha))
                        .addGap(18, 18, 18)
                        .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtConfirmeSenha, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(txtSenha))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLimpar)
                        .addGap(28, 28, 28)
                        .addComponent(btnEnviar)
                        .addGap(96, 96, 96))))
        );
        pnlDadosFuncionarioLayout.setVerticalGroup(
            pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDadosFuncionarioLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNome)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDataNascimento)
                    .addComponent(txtDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDadosFuncionarioLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCpf)
                            .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSalario)))
                    .addGroup(pnlDadosFuncionarioLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbTipoFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTipoFuncionario))
                        .addGap(15, 15, 15)
                        .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStatus))))
                .addGap(19, 19, 19)
                .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSenha))
                .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDadosFuncionarioLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtConfirmeSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblConfirmaSenha))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDadosFuncionarioLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addGroup(pnlDadosFuncionarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnLimpar)
                            .addComponent(btnEnviar))
                        .addGap(38, 38, 38))))
        );

        lblNome.getAccessibleContext().setAccessibleDescription("Nome");
        txtNome.getAccessibleContext().setAccessibleName("Nome");
        txtNome.getAccessibleContext().setAccessibleDescription("Nome do funcionário");
        txtCpf.getAccessibleContext().setAccessibleDescription("CPF do funcionário");
        txtSalario.getAccessibleContext().setAccessibleDescription("Salário do funcionário");
        cmbTipoFuncionario.getAccessibleContext().setAccessibleDescription("Tipo de funcionário");
        txtDataNascimento.getAccessibleContext().setAccessibleDescription("Data de nascimento do funcionário");

        pnlFuncionarios.setBackground(new java.awt.Color(49, 77, 74));

        lblPesquisa.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPesquisa.setForeground(new java.awt.Color(23, 24, 31));
        lblPesquisa.setText("Pesquisar nome:");

        txtPesquisaNome.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtPesquisaNomeCaretUpdate(evt);
            }
        });
        txtPesquisaNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPesquisaNomeKeyPressed(evt);
            }
        });

        tbFuncionarios.setModel(dtmFuncionario);
        tblFuncionarios.setViewportView(tbFuncionarios);

        btEditar.setText("Editar");
        btEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFuncionariosLayout = new javax.swing.GroupLayout(pnlFuncionarios);
        pnlFuncionarios.setLayout(pnlFuncionariosLayout);
        pnlFuncionariosLayout.setHorizontalGroup(
            pnlFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFuncionariosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFuncionariosLayout.createSequentialGroup()
                        .addComponent(lblPesquisa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisaNome, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btEditar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(tblFuncionarios))
                .addContainerGap())
        );
        pnlFuncionariosLayout.setVerticalGroup(
            pnlFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFuncionariosLayout.createSequentialGroup()
                .addGap(0, 9, Short.MAX_VALUE)
                .addGroup(pnlFuncionariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPesquisa)
                    .addComponent(txtPesquisaNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btEditar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tblFuncionarios, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlContainerLayout = new javax.swing.GroupLayout(pnlContainer);
        pnlContainer.setLayout(pnlContainerLayout);
        pnlContainerLayout.setHorizontalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlContainerLayout.createSequentialGroup()
                        .addComponent(pnlDadosFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(pnlFuncionarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addGap(217, 217, 217)
                .addComponent(lblTitulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlContainerLayout.setVerticalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlDadosFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlFuncionarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
    // Verificar se os campos estão vazios ou validos.
    if(!emptyFields()){
        Funcionario funcionario = createFuncionario();
        //Verifica se existe esse cadastro
        FuncionarioDAO funcionarioDao = new FuncionarioDAO();
        Map<String, Funcionario> listaFuncionario = funcionarioDao.getFuncionario();
        
        if(listaFuncionario.containsKey(funcionario.getCpf())){
            editFuncionario(funcionario);
            
        } else {
            funcionarioDao.inserir(funcionario);
            
            JOptionPane.showMessageDialog(null, funcionario.getNome() + " cadastrado com sucesso.",
                "Cadastrado com sucesso", JOptionPane.INFORMATION_MESSAGE);
        }
        atualizaLista();
        txtCpf.setEnabled(true);
        cleanFields();
        }

    }//GEN-LAST:event_btnEnviarActionPerformed

    private void txtPesquisaNomeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisaNomeKeyPressed
    }//GEN-LAST:event_txtPesquisaNomeKeyPressed

    private void btEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarActionPerformed
        // TODO add your handling code here:
        int linha = tbFuncionarios.getSelectedRow();
        if(linha == -1){
            JOptionPane.showMessageDialog(null, "Você precisa selecionar uma linha da tabela, que deseja atualizar.", "Selecione uma linha", JOptionPane.WARNING_MESSAGE);
        } else {
            String cpf = (String) dtmFuncionario.getValueAt(linha, 1);
            FuncionarioDAO funcionarioDao = new FuncionarioDAO();
            Funcionario func = funcionarioDao.getFuncionario().get(cpf);
            
            if(func.getCpf().equals(TelaInicial.funcionario.getCpf())) {
                JOptionPane.showMessageDialog(null, "Você não pode se EDITAR.", "Erro ao EDITAR", JOptionPane.WARNING_MESSAGE);
                cleanFields();
            } else {
                carregaDados(func);
            }    
        }
    }//GEN-LAST:event_btEditarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        // TODO add your handling code here:
        cleanFields();
        atualizaLista();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void txtPesquisaNomeCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtPesquisaNomeCaretUpdate
        // TODO add your handling code here:
        String nome = txtPesquisaNome.getText();
        if(nome.length()==0){
            atualizaLista();
        }else {
            buscarUsuarioPorNome(nome);
        }
    }//GEN-LAST:event_txtPesquisaNomeCaretUpdate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCadFuncionario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            TelaCadFuncionario dialog = new TelaCadFuncionario(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btEditar;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JComboBox cmbTipoFuncionario;
    private javax.swing.JLabel lblConfirmaSenha;
    private javax.swing.JLabel lblCpf;
    private javax.swing.JLabel lblDataNascimento;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblPesquisa;
    private javax.swing.JLabel lblSalario;
    private javax.swing.JLabel lblSenha;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTipoFuncionario;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlContainer;
    private javax.swing.JPanel pnlDadosFuncionario;
    private javax.swing.JPanel pnlFuncionarios;
    private javax.swing.JTable tbFuncionarios;
    private javax.swing.JScrollPane tblFuncionarios;
    private javax.swing.JPasswordField txtConfirmeSenha;
    private javax.swing.JFormattedTextField txtCpf;
    private javax.swing.JFormattedTextField txtDataNascimento;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtPesquisaNome;
    private javax.swing.JFormattedTextField txtSalario;
    private javax.swing.JPasswordField txtSenha;
    // End of variables declaration//GEN-END:variables

    private boolean emptyFields() {
        boolean resp = false;
        if(txtNome.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Campo Nome vazio.", "Campo vazio", JOptionPane.WARNING_MESSAGE);
            resp = true;
            txtNome.setText("");
            txtNome.requestFocus();
        } else if(txtDataNascimento.getText().replace("/", "").trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Campo Data de nascimento não pode está vázio.\nModelo: dd/mm/aaaa.", "Formato inválido", JOptionPane.WARNING_MESSAGE);
            resp = true;
            txtDataNascimento.setText("");
            txtDataNascimento.setValue(null);
            txtDataNascimento.requestFocus();
        } else if(!isValidDate(txtDataNascimento.getText())){
            JOptionPane.showMessageDialog(null, "Campo Data de nascimento formato inválido.\nModelo: dd/mm/aaaa.", "Formato inválido", JOptionPane.WARNING_MESSAGE);
            resp = true;
            txtDataNascimento.setText("");
            txtDataNascimento.setValue(null);
            txtDataNascimento.requestFocus();
        } else if(txtCpf.getText().replace(".", "").replace("-","").trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Campo CPF formato inválido.\nModelo: 000.000.000-00.", "Formato inválido", JOptionPane.WARNING_MESSAGE);
            resp = true;
            txtCpf.setText("");
            txtCpf.setValue(null);
            txtCpf.requestFocus();
        } else if(txtSalario.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(null, "Campo Salário está vazio.", "Campo vazio", JOptionPane.WARNING_MESSAGE);
            resp = true;
            txtSalario.setText("");
            txtSalario.setValue(null);
            txtSalario.requestFocus();
        } else if(txtSenha.getPassword().length == 0){
            JOptionPane.showMessageDialog(null, "Campo Senha está vazio.", "Campo vazio", JOptionPane.WARNING_MESSAGE);
            
            resp = true;
            txtSenha.setText("");
            txtSenha.requestFocus();
        } else if(!java.util.Arrays.equals(txtSenha.getPassword(), txtConfirmeSenha.getPassword())){
            JOptionPane.showMessageDialog(null, "Campo Senha e Confirme senha tem que ser igual.", "Campos diferentes", JOptionPane.WARNING_MESSAGE);
            resp = true;
            txtConfirmeSenha.setText("");
            txtConfirmeSenha.requestFocus();
        }
        return resp;
    }

    private void atualizaLista() {
        dtmFuncionario.setRowCount(0);
        FuncionarioDAO funcionarioDao = new FuncionarioDAO();
        Map<String, Funcionario> listaFuncionario = funcionarioDao.getFuncionario();
        for (Map.Entry<String, Funcionario> entrada : listaFuncionario.entrySet()) {
            
            DecimalFormat df = new DecimalFormat("#.00");
            String numeroFormatado = "R$ " + df.format(entrada.getValue().getSalario());
            
            CargoDAO cargoDao = new CargoDAO();
            Cargo cargo = cargoDao.getCargo(entrada.getValue().getCargo().getId());
            
            String status = entrada.getValue().isAtivo() ? "Sim" : "Não";
            
            String[] linha = {entrada.getValue().getNome(), entrada.getValue().getCpf(), numeroFormatado, 
                                entrada.getValue().getDataNascimento().format(dataFormatada), cargo.getTipo(), status};
            dtmFuncionario.addRow(linha);
        }      
    }
    
    private void cleanFields(){
        txtNome.setText("");
        txtDataNascimento.setText("");
        txtDataNascimento.setValue(null);
        txtPesquisaNome.setText("");
        txtCpf.setText("");
        txtCpf.setValue(null);
        
        txtCpf.setEnabled(true);
        cmbTipoFuncionario.setSelectedIndex(0);
        txtSalario.setText("");
        cmbStatus.setSelectedIndex(0);
        cmbStatus.setEnabled(false);
        txtSenha.setText("");
        txtConfirmeSenha.setText("");
        txtNome.requestFocus();
        
    }
    
    private boolean isValidDate(String dateStr) {
        try {
            LocalDate.parse(dateStr, dataFormatada);
            return true;
        } catch(DateTimeParseException e){
            return false;
        } 
    }
         
     private void buscarUsuarioPorNome(String nome) {
        // Limpa a tabela antes de mostrar os resultados
        dtmFuncionario.setRowCount(0);
        // Verifica se o usuário existe no mapa
        FuncionarioDAO funcionarioDao = new FuncionarioDAO();
         Map<String, Funcionario> listaFuncionario = funcionarioDao.getFuncionario();
        for (Funcionario funcionario : listaFuncionario.values()) {
            if (funcionario.getNome().toLowerCase().startsWith(nome.toLowerCase())) {
                DecimalFormat df = new DecimalFormat("#.00");
                String numeroFormatado = "R$ " + df.format(funcionario.getSalario());
                
                CargoDAO cargoDao = new CargoDAO();
                Cargo cargo = cargoDao.getCargo(funcionario.getCargo().getId());
                
                String status = funcionario.isAtivo() ? "Sim" : "Não";
                
                Object[] linha = {funcionario.getNome(), funcionario.getCpf(), numeroFormatado, 
                                funcionario.getDataNascimento().format(dataFormatada), cargo, status};
                    
                dtmFuncionario.addRow(linha);
            }
        }
    }
     private void carregaDados(Funcionario funcionario) {
        txtNome.setText(funcionario.getNome());
        txtDataNascimento.setText(funcionario.getDataNascimento().format(dataFormatada));
        txtCpf.setText(funcionario.getCpf());
        txtCpf.setEnabled(false);
        txtSalario.setText(funcionario.getSalario().toString().replace(".",","));
        txtSenha.setText(funcionario.getSenha());

        String status = (funcionario.isAtivo()) ? "Ativo": "Inativo";
        cmbStatus.setSelectedItem(status);
        cmbStatus.setEnabled(true);
        tbFuncionarios.clearSelection();

        cmbTipoFuncionario.setSelectedItem(funcionario.getCargo());
        txtSenha.setText(funcionario.getSenha());
        txtConfirmeSenha.setText(funcionario.getSenha());
     }
     
     private Funcionario createFuncionario() {
        Funcionario funcionario = new Funcionario();
        funcionario.setNome(txtNome.getText());
        funcionario.setDataNascimento(LocalDate.parse(txtDataNascimento.getText(), dataFormatada));
        funcionario.setCpf(txtCpf.getText());
        funcionario.setSalario(Double.valueOf(txtSalario.getText().replace(",", ".")));
        char[] charSenha = txtSenha.getPassword();
        String senha = new String(charSenha);
        boolean status = cmbStatus.getSelectedItem().toString().equals("Ativo");
        funcionario.setAtivo(status);
        funcionario.setSenha(senha);
        Cargo cargo = (Cargo) cmbTipoFuncionario.getSelectedItem();
        funcionario.setCargo(cargo);
        
        if(cargo.getTipo().equals("Gerente")) {
            funcionario = new Gerente(funcionario);
        } else if(cargo.getTipo().equals("Coordenador")) {
            funcionario = new Coordenador(funcionario);
        }
        return funcionario;
     }
     
     private void editFuncionario(Funcionario funcionario) {
        Object[] opcoes = {"Sim", "Não"};
        FuncionarioDAO funcionarioDao = new FuncionarioDAO();
        
        Map<String, Funcionario> listaFuncionario = funcionarioDao.getFuncionario();
        Funcionario funcAntigo = listaFuncionario.get(funcionario.getCpf());
        
        funcionario.setId(funcAntigo.getId());
        if(TelaInicial.funcionario.getId() == funcAntigo.getId()){
            JOptionPane.showMessageDialog(null, "Você não pode se EDITAR.", "Erro ao EDITAR", JOptionPane.WARNING_MESSAGE);
        }else {
            String mensagem = "Deseja atualizar o funcionário já existente?"
                     + "\nNome: " + funcAntigo.getNome() + "\nCPF: " + funcionario.getCpf()
                     + "\nData de nascimento: " + funcAntigo.getDataNascimento().format(dataFormatada);

            int resposta = JOptionPane.showOptionDialog(null, mensagem, "Deseja atualizar?", 
                JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, opcoes, 
                opcoes[1]);

            if(resposta == 0){
                funcionarioDao.editar(funcionario);
                atualizaLista();
                JOptionPane.showMessageDialog(null, funcionario.getNome() + " atualizado com sucesso.");
            }
        }
     }

    private void preencherComboCargo() {
        CargoDAO cargoDao = new CargoDAO();
        List<Cargo> lista = cargoDao.getCargo();
        
        for (Cargo c : lista){
            cmbTipoFuncionario.addItem(c);
        }
    }
}
